import * as React from 'react';
import { LogContextValue } from './KnobContexts';
export declare type KnobDefinition = {
    content?: React.ReactNode;
    name: KnobName;
    type: 'boolean' | 'number' | 'range' | 'string' | 'select';
    value: any;
    values?: any[];
};
export declare type KnobName = string;
export declare type KnobSet = Record<KnobName, KnobDefinition>;
export declare type KnobComponent<P = KnobComponentProps> = React.FunctionComponent<P>;
export declare type KnobComponents = {
    KnobField: KnobComponent;
    KnobControl: KnobComponent;
    KnobLabel: KnobComponent;
    KnobBoolean: KnobComponent;
    KnobNumber: KnobComponent;
    KnobRange: KnobComponent<KnobRangeKnobComponentProps>;
    KnobSelect: KnobComponent;
    KnobString: KnobComponent;
    LogInspector: React.FunctionComponent<LogInspectorProps>;
};
export declare type KnobComponentProps = KnobDefinition & {
    setValue: (value: any) => void;
};
export declare type KnobRangeKnobComponentProps = KnobComponentProps & {
    min: string;
    max: string;
    step: string;
    unit: string;
};
export declare type LogInspectorProps = Pick<LogContextValue, 'clearLog' | 'items'>;
export declare type LogFormatter<T extends any[] = any[]> = (name: string, ...args: T) => string;
export declare type UseKnobOptions<T> = {
    content?: React.ReactNode;
    name: string;
    initialValue?: T;
    values?: T[];
};
