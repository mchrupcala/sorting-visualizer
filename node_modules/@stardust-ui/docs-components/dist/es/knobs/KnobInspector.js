import _extends from "@babel/runtime/helpers/esm/extends";
import * as React from 'react';
import { KnobContext } from './KnobContexts';
import useKnobValues from './useKnobValues';

var getKnobControls = function getKnobControls(knobsContext) {
  var _knobsContext$compone = knobsContext.components,
      KnobControl = _knobsContext$compone.KnobControl,
      KnobField = _knobsContext$compone.KnobField,
      KnobLabel = _knobsContext$compone.KnobLabel;
  var controls = {
    Control: KnobControl,
    Field: KnobField,
    Label: KnobLabel
  };

  if (process.env.NODE_ENV !== 'production') {
    Object.keys(controls).forEach(function (name) {
      if (typeof controls[name] === 'undefined') {
        throw new Error("\"".concat(name, "\" is not defined, please check you mapping"));
      }
    });
  }

  return controls;
};

var getKnobComponents = function getKnobComponents(knobsContext) {
  var _knobsContext$compone2 = knobsContext.components,
      KnobBoolean = _knobsContext$compone2.KnobBoolean,
      KnobNumber = _knobsContext$compone2.KnobNumber,
      KnobRange = _knobsContext$compone2.KnobRange,
      KnobSelect = _knobsContext$compone2.KnobSelect,
      KnobString = _knobsContext$compone2.KnobString;
  var components = {
    boolean: KnobBoolean,
    number: KnobNumber,
    range: KnobRange,
    select: KnobSelect,
    string: KnobString
  };

  if (process.env.NODE_ENV !== 'production') {
    Object.keys(components).forEach(function (name) {
      if (typeof components[name] === 'undefined') {
        throw new Error("A component for \"".concat(name, "\" is not defined, please check you mapping"));
      }
    });
  }

  return components;
};

var KnobInspector = function KnobInspector(props) {
  var knobContext = React.useContext(KnobContext);

  var _getKnobControls = getKnobControls(knobContext),
      Control = _getKnobControls.Control,
      Field = _getKnobControls.Field,
      Label = _getKnobControls.Label;

  var knobComponents = getKnobComponents(knobContext);
  var knobValues = useKnobValues();
  var children = knobValues.length > 0 ? React.createElement(React.Fragment, null, knobValues.map(function (knob) {
    var setValue = function setValue(value) {
      return knobContext.setKnobValue(knob.name, value);
    };

    var knobProps = Object.assign({}, knob, {
      setValue: setValue
    });
    return React.createElement(Field, _extends({}, knobProps, {
      key: knob.name
    }), React.createElement(Label, knobProps), React.createElement(Control, knobProps, React.createElement(knobComponents[knob.type], knobProps)));
  })) : null;
  return props.children ? props.children(children) : children;
};

export default KnobInspector;