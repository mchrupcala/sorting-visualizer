import _isObject from "lodash/isObject";
import * as _prettier from 'prettier/standalone';
import babylon from 'prettier/parser-babylon';
import html from 'prettier/parser-html';
import typescript from 'prettier/parser-typescript';
// `prettier` is a CJS library, there are known issues with them:
// https://github.com/rollup/rollup/issues/1267#issuecomment-446681320
var prettier = _prettier.default || _prettier;
var prettierConfig = {
  htmlWhitespaceSensitivity: 'ignore',
  printWidth: 100,
  tabWidth: 2,
  semi: false,
  singleQuote: true,
  trailingComma: 'all',
  plugins: {
    babylon: babylon,
    html: html,
    typescript: typescript
  }
};

var normalizeToString = function normalizeToString(value) {
  if (Array.isArray(value)) return value.join('\n');
  return _isObject(value) ? JSON.stringify(value, null, 2) : value;
};

export var prettifyCode = function prettifyCode(code, parser) {
  var formatted = prettier.format(code, Object.assign({}, prettierConfig, {
    // a narrower print width is more friendly to doc examples
    parser: parser
  }));
  return formatted.replace(/^;</m, '<'); // remove beginning semi in JSX/HTML
};
var formatters = {
  bash: function bash() {
    var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    return val.replace(/^/g, '$  ');
  },
  json: function json(val) {
    return prettifyCode(val, 'json');
  },
  js: function js() {
    var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    return prettifyCode(val, 'babel');
  },
  jsx: function jsx() {
    var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    return prettifyCode(val, 'babel');
  },
  html: function html() {
    var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    return prettifyCode(val, 'html');
  }
};
export var formatCode = function formatCode(code, mode) {
  if (!code) return '';
  var formatter = formatters[mode];
  return formatter(normalizeToString(code)) // remove eof line break, they are not helpful for snippets
  .replace(/\n$/, '');
};