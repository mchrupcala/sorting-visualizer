import _extends from "@babel/runtime/helpers/esm/extends";
import * as Prism from 'prismjs/components/prism-core';
import * as PropTypes from 'prop-types';
import * as React from 'react'; // Order of PrismJS imports there is sensitive

import 'prismjs/components/prism-clike';
import 'prismjs/components/prism-json';
import 'prismjs/components/prism-markup';
import 'prismjs/components/prism-bash';
import 'prismjs/components/prism-javascript';
import 'prismjs/components/prism-jsx';
import { formatCode } from './formatCode';
import CodeSnippetLabel from './CodeSnippetLabel';

var CodeSnippet = function CodeSnippet(props) {
  var className = props.className,
      fitted = props.fitted,
      formattable = props.formattable,
      mode = props.mode,
      value = props.value;
  var codeClassName = "language-".concat(mode);
  var code = formattable ? formatCode(value, mode) : value;
  var codeRef = React.useRef(null);
  React.useLayoutEffect(function () {
    Prism.highlightElement(codeRef.current);
  });
  return React.createElement("div", {
    className: className,
    style: {
      fontSize: '12px',
      position: 'relative'
    }
  }, React.createElement(CodeSnippetLabel, _extends({}, props, {
    value: code
  })), React.createElement("pre", {
    style: {
      margin: fitted ? '0' : undefined
    }
  }, React.createElement("code", {
    className: codeClassName,
    ref: codeRef
  }, code)));
};

CodeSnippet.defaultProps = {
  copyable: true,
  formattable: true,
  mode: 'jsx'
};
CodeSnippet.propTypes = {
  className: PropTypes.string,
  copyable: PropTypes.bool,
  fitted: PropTypes.bool,
  formattable: PropTypes.bool,
  label: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),
  mode: PropTypes.oneOf(['bash', 'json', 'js', 'jsx', 'html']),
  style: PropTypes.object,
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string), PropTypes.object]).isRequired
};
export default React.memo(CodeSnippet);