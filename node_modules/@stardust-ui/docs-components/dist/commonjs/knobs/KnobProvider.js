"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var React = _interopRequireWildcard(require("react"));

var _defaultComponents = _interopRequireDefault(require("./defaultComponents"));

var _KnobContexts = require("./KnobContexts");

var KnobProvider = function KnobProvider(props) {
  var children = props.children,
      components = props.components;

  var _React$useState = React.useState({}),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      knobs = _React$useState2[0],
      setKnobs = _React$useState2[1];

  var _React$useState3 = React.useState([]),
      _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
      items = _React$useState4[0],
      setItems = _React$useState4[1];

  var registerKnob = function registerKnob(knob) {
    setKnobs(function (prevKnobs) {
      if (process.env.NODE_ENV !== 'production') {
        if (prevKnobs[knob.name]) {
          throw new Error("Knob with name \"".concat(knob.name, "\" has been already registered"));
        }
      }

      return Object.assign({}, prevKnobs, (0, _defineProperty2.default)({}, knob.name, knob));
    });
  };

  var setKnobValue = function setKnobValue(knobName, knobValue) {
    setKnobs(function (prevKnob) {
      return Object.assign({}, prevKnob, (0, _defineProperty2.default)({}, knobName, Object.assign({}, prevKnob[knobName], {
        value: knobValue
      })));
    });
  };

  var unregisterKnob = function unregisterKnob(knobName) {
    setKnobs(function (prevKnobs) {
      var newKnobs = Object.assign({}, prevKnobs);
      delete newKnobs[knobName];
      return newKnobs;
    });
  };

  var appendLog = React.useCallback(function (value) {
    return setItems(function (prevLog) {
      return [].concat((0, _toConsumableArray2.default)(prevLog), [value]);
    });
  }, []);
  var clearLog = React.useCallback(function () {
    return setItems([]);
  }, []);
  var knobValue = React.useMemo(function () {
    return {
      components: Object.assign({}, _defaultComponents.default, components),
      knobs: knobs,
      registerKnob: registerKnob,
      setKnobValue: setKnobValue,
      unregisterKnob: unregisterKnob
    };
  }, [knobs, components]);
  var logValue = React.useMemo(function () {
    return {
      appendLog: appendLog,
      clearLog: clearLog,
      items: items
    };
  }, [items]);
  return React.createElement(_KnobContexts.KnobContext.Provider, {
    value: knobValue
  }, React.createElement(_KnobContexts.LogContext.Provider, {
    value: logValue
  }, children));
};

KnobProvider.defaultProps = {
  components: {}
};
var _default = KnobProvider;
exports.default = _default;