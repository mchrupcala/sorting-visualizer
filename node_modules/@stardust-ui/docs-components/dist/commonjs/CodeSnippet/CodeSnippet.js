"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var Prism = _interopRequireWildcard(require("prismjs/components/prism-core"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

require("prismjs/components/prism-clike");

require("prismjs/components/prism-json");

require("prismjs/components/prism-markup");

require("prismjs/components/prism-bash");

require("prismjs/components/prism-javascript");

require("prismjs/components/prism-jsx");

var _formatCode = require("./formatCode");

var _CodeSnippetLabel = _interopRequireDefault(require("./CodeSnippetLabel"));

// Order of PrismJS imports there is sensitive
var CodeSnippet = function CodeSnippet(props) {
  var className = props.className,
      fitted = props.fitted,
      formattable = props.formattable,
      mode = props.mode,
      value = props.value;
  var codeClassName = "language-".concat(mode);
  var code = formattable ? (0, _formatCode.formatCode)(value, mode) : value;
  var codeRef = React.useRef(null);
  React.useLayoutEffect(function () {
    Prism.highlightElement(codeRef.current);
  });
  return React.createElement("div", {
    className: className,
    style: {
      fontSize: '12px',
      position: 'relative'
    }
  }, React.createElement(_CodeSnippetLabel.default, (0, _extends2.default)({}, props, {
    value: code
  })), React.createElement("pre", {
    style: {
      margin: fitted ? '0' : undefined
    }
  }, React.createElement("code", {
    className: codeClassName,
    ref: codeRef
  }, code)));
};

CodeSnippet.defaultProps = {
  copyable: true,
  formattable: true,
  mode: 'jsx'
};
CodeSnippet.propTypes = {
  className: PropTypes.string,
  copyable: PropTypes.bool,
  fitted: PropTypes.bool,
  formattable: PropTypes.bool,
  label: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),
  mode: PropTypes.oneOf(['bash', 'json', 'js', 'jsx', 'html']),
  style: PropTypes.object,
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string), PropTypes.object]).isRequired
};

var _default = React.memo(CodeSnippet);

exports.default = _default;